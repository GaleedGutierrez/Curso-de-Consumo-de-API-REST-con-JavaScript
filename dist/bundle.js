(()=>{"use strict";const t="https://api.thecatapi.com/v1/",e=`${t}images/search?limit=2&api_key=d0bb4eed-2aec-4eaa-8ad7-2639796348e8`,s=`${t}favourites?limit=2`,a=async(t,e)=>{t.src=`${r}${e}`},r="https://http.cat/",n=document.getElementById("random-michis__img-cat-1-id"),o=document.getElementById("random-michis__img-cat-2-id"),i=(document.getElementById("main__button-refresh-id"),document.getElementById("main__error-section-id")),c=document.getElementById("error-section__http-code-errors-img-id"),d=document.getElementById("main__error-id"),m=t=>{t.classList.contains("hidden")&&t.classList.remove("hidden")},h=t=>{d.innerText=t.message,console.log(t)};(async(t,e)=>{try{const s=await fetch(e);if(200!==s.status){const t=await s.json();throw a(c,t.status),new Error(`There was an error. HTTP Code: ${s.status}.`)}const r=await s.json();for(let e=0;e<r.length;e++)t[e].src=r[e].url}catch(t){t instanceof Error&&h(t),m(i)}})([n,o],e),(async(t,e)=>{try{const t=await fetch(e);if(200!==t.status){const e=await t.json();throw a(c,e.status),new Error(`There was an error. HTTP Code: ${t.status}.`)}}catch(t){t instanceof Error&&h(t),m(i)}})(0,s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDQSxNQUFNQSxFQUFNLGdDQUVDQyxFQUFpQixHQUFHRCxzRUFDcEJFLEVBQW9CLEdBQUdGLHNCQ0p2QkcsRUFBWUMsTUFBT0MsRUFBS0MsS0FDakNELEVBQUlFLElBQU0sR0FBR0MsSUFBVUYsS0FFckJFLEVBQVUsb0JDRkhDLEVBQU9DLFNBQVNDLGVBQWUsK0JBQy9CQyxFQUFPRixTQUFTQyxlQUFlLCtCQUUvQkUsR0FEU0gsU0FBU0MsZUFBZSwyQkFDbEJELFNBQVNDLGVBQWUsMkJBQ3ZDRyxFQUFjSixTQUFTQyxlQUFlLDBDQUN0Q0ksRUFBU0wsU0FBU0MsZUFBZSxrQkNnQ3hDSyxFQUFvQkgsSUFDbEJBLEVBQWFJLFVBQVVDLFNBQVMsV0FDaENMLEVBQWFJLFVBQVVFLE9BQU8sV0FFaENDLEVBQTBCQyxJQUM1Qk4sRUFBT08sVUFBWUQsRUFBTUUsUUFDekJDLFFBQVFDLElBQUlKLElBekNTakIsT0FBT3NCLEVBQU1DLEtBQ2xDLElBQ0ksTUFBTUMsUUFBZ0JDLE1BQU1GLEdBQzVCLEdBQXVCLE1BQW5CQyxFQUFRRSxPQUFnQixDQUN4QixNQUFNQyxRQUFhSCxFQUFRSSxPQUUzQixNQURBN0IsRUFBVVcsRUFBYWlCLEVBQUtELFFBQ3RCLElBQUlHLE1BQU0sa0NBQWtDTCxFQUFRRSxXQUU5RCxNQUFNQyxRQUFhSCxFQUFRSSxPQUMzQixJQUFLLElBQUlFLEVBQUksRUFBR0EsRUFBSUgsRUFBS0ksT0FBUUQsSUFDN0JSLEVBQUtRLEdBQUczQixJQUFNd0IsRUFBS0csR0FBR1AsSUFHOUIsTUFBT04sR0FDQ0EsYUFBaUJZLE9BQ2pCYixFQUF1QkMsR0FDM0JMLEVBQWlCSCxLQWdDekJ1QixDQUZhLENBQUMzQixFQUFNRyxHQUVHWCxHQTdCS0csT0FBT3NCLEVBQU1DLEtBQ3JDLElBQ0ksTUFBTUMsUUFBZ0JDLE1BQU1GLEdBQzVCLEdBQXVCLE1BQW5CQyxFQUFRRSxPQUFnQixDQUN4QixNQUFNQyxRQUFhSCxFQUFRSSxPQUUzQixNQURBN0IsRUFBVVcsRUFBYWlCLEVBQUtELFFBQ3RCLElBQUlHLE1BQU0sa0NBQWtDTCxFQUFRRSxZQUlsRSxNQUFPVCxHQUNDQSxhQUFpQlksT0FDakJiLEVBQXVCQyxHQUMzQkwsRUFBaUJILEtBaUJ6QndCLENBQW9CWCxFQUFNeEIsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2N1cnNvLWRlLWNvbnN1bW8tZGUtYXBpLXJlc3QtY29uLWphdmFzY3JpcHQvLi9zcmMvYXBpLnRzIiwid2VicGFjazovL2N1cnNvLWRlLWNvbnN1bW8tZGUtYXBpLXJlc3QtY29uLWphdmFzY3JpcHQvLi9zcmMvY29kZUVycm9ySFRUUC50cyIsIndlYnBhY2s6Ly9jdXJzby1kZS1jb25zdW1vLWRlLWFwaS1yZXN0LWNvbi1qYXZhc2NyaXB0Ly4vc3JjL2h0bWxFbGVtZW50cy50cyIsIndlYnBhY2s6Ly9jdXJzby1kZS1jb25zdW1vLWRlLWFwaS1yZXN0LWNvbi1qYXZhc2NyaXB0Ly4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQVBJIHNlY3Rpb25cbmNvbnN0IEFQSSA9ICdodHRwczovL2FwaS50aGVjYXRhcGkuY29tL3YxLyc7XG5jb25zdCBBUElfS0VZID0gJ2QwYmI0ZWVkLTJhZWMtNGVhYS04YWQ3LTI2Mzk3OTYzNDhlOCc7XG5leHBvcnQgY29uc3QgQVBJX1VSTF9SQU5ET00gPSBgJHtBUEl9aW1hZ2VzL3NlYXJjaD9saW1pdD0yJmFwaV9rZXk9JHtBUElfS0VZfWA7XG5leHBvcnQgY29uc3QgQVBJX1VSTF9GQVZPUklURVMgPSBgJHtBUEl9ZmF2b3VyaXRlcz9saW1pdD0yYDtcbiIsImV4cG9ydCBjb25zdCBodHRwQ29kZXMgPSBhc3luYyAoaW1nLCBjb2RlKSA9PiB7XG4gICAgaW1nLnNyYyA9IGAke0FQSV9VUkx9JHtjb2RlfWA7XG59O1xuY29uc3QgQVBJX1VSTCA9ICdodHRwczovL2h0dHAuY2F0Lyc7XG4iLCIvLyBET00gc2VjdGlvblxuZXhwb3J0IGNvbnN0IGltZzEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmFuZG9tLW1pY2hpc19faW1nLWNhdC0xLWlkJyk7XG5leHBvcnQgY29uc3QgaW1nMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYW5kb20tbWljaGlzX19pbWctY2F0LTItaWQnKTtcbmV4cG9ydCBjb25zdCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbl9fYnV0dG9uLXJlZnJlc2gtaWQnKTtcbmV4cG9ydCBjb25zdCBlcnJvclNlY3Rpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbl9fZXJyb3Itc2VjdGlvbi1pZCcpO1xuZXhwb3J0IGNvbnN0IGltZ0h0dHBDb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9yLXNlY3Rpb25fX2h0dHAtY29kZS1lcnJvcnMtaW1nLWlkJyk7XG5leHBvcnQgY29uc3QgcEVycm9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW5fX2Vycm9yLWlkJyk7XG4iLCJpbXBvcnQgeyBBUElfVVJMX0ZBVk9SSVRFUywgQVBJX1VSTF9SQU5ET00gfSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCB7IGh0dHBDb2RlcyB9IGZyb20gXCIuL2NvZGVFcnJvckhUVFBcIjtcbmltcG9ydCB7IGVycm9yU2VjdGlvbiwgaW1nMSwgaW1nMiwgaW1nSHR0cENvZGUsIHBFcnJvciB9IGZyb20gXCIuL2h0bWxFbGVtZW50c1wiO1xuY29uc3QgbG9hZFJhbmRvbU1pY2hpcyA9IGFzeW5jIChpbWdzLCB1cmwpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICAgICAgICAgIGh0dHBDb2RlcyhpbWdIdHRwQ29kZSwgZGF0YS5zdGF0dXMpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSB3YXMgYW4gZXJyb3IuIEhUVFAgQ29kZTogJHtyZXF1ZXN0LnN0YXR1c30uYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGltZ3NbaV0uc3JjID0gZGF0YVtpXS51cmw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICAgICAgdGhlcmVXYXNBbkVycm9yTWVzc2FnZShlcnJvcik7XG4gICAgICAgIHNob3dFcnJvclNlY3Rpb24oZXJyb3JTZWN0aW9uKTtcbiAgICB9XG59O1xuY29uc3QgbG9hZEZhdm9yaXRlc01pY2hpcyA9IGFzeW5jIChpbWdzLCB1cmwpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICAgICAgICAgIGh0dHBDb2RlcyhpbWdIdHRwQ29kZSwgZGF0YS5zdGF0dXMpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSB3YXMgYW4gZXJyb3IuIEhUVFAgQ29kZTogJHtyZXF1ZXN0LnN0YXR1c30uYCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3QgZGF0YTogQXBpQ2F0W10gPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICAgICAgdGhlcmVXYXNBbkVycm9yTWVzc2FnZShlcnJvcik7XG4gICAgICAgIHNob3dFcnJvclNlY3Rpb24oZXJyb3JTZWN0aW9uKTtcbiAgICB9XG59O1xuY29uc3Qgc2hvd0Vycm9yU2VjdGlvbiA9IChlcnJvclNlY3Rpb24pID0+IHtcbiAgICBpZiAoZXJyb3JTZWN0aW9uLmNsYXNzTGlzdC5jb250YWlucygnaGlkZGVuJykpXG4gICAgICAgIGVycm9yU2VjdGlvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbn07XG5jb25zdCB0aGVyZVdhc0FuRXJyb3JNZXNzYWdlID0gKGVycm9yKSA9PiB7XG4gICAgcEVycm9yLmlubmVyVGV4dCA9IGVycm9yLm1lc3NhZ2U7XG4gICAgY29uc29sZS5sb2coZXJyb3IpO1xufTtcbi8vIGNvbnN0IGN0b0xvYWRSYW5kb21NaWNoaXMgPSAoKSA9PiB7XG4vLyAgICAgbG9hZFJhbmRvbU1pY2hpcyhpbWdzLCAgQVBJX1VSTF9SQU5ET00pO1xuLy8gfTtcbmNvbnN0IGltZ3MgPSBbaW1nMSwgaW1nMl07XG4vLyBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjdG9Mb2FkUmFuZG9tTWljaGlzKTtcbmxvYWRSYW5kb21NaWNoaXMoaW1ncywgQVBJX1VSTF9SQU5ET00pO1xubG9hZEZhdm9yaXRlc01pY2hpcyhpbWdzLCBBUElfVVJMX0ZBVk9SSVRFUyk7XG4iXSwibmFtZXMiOlsiQVBJIiwiQVBJX1VSTF9SQU5ET00iLCJBUElfVVJMX0ZBVk9SSVRFUyIsImh0dHBDb2RlcyIsImFzeW5jIiwiaW1nIiwiY29kZSIsInNyYyIsIkFQSV9VUkwiLCJpbWcxIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImltZzIiLCJlcnJvclNlY3Rpb24iLCJpbWdIdHRwQ29kZSIsInBFcnJvciIsInNob3dFcnJvclNlY3Rpb24iLCJjbGFzc0xpc3QiLCJjb250YWlucyIsInJlbW92ZSIsInRoZXJlV2FzQW5FcnJvck1lc3NhZ2UiLCJlcnJvciIsImlubmVyVGV4dCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwiaW1ncyIsInVybCIsInJlcXVlc3QiLCJmZXRjaCIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwiRXJyb3IiLCJpIiwibGVuZ3RoIiwibG9hZFJhbmRvbU1pY2hpcyIsImxvYWRGYXZvcml0ZXNNaWNoaXMiXSwic291cmNlUm9vdCI6IiJ9